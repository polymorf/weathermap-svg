#!/usr/bin/perl
# Network Wearthermap-SVG - version 0.3
# http://sourceforge.net/projects/weathermap-svg/
# David BERARD, <david@nfrance.com>
# Based on http://netmon.grnet.gr/weathermap/ by Panagiotis Christias

$VERSION = "0.4";

use Getopt::Long;
use XML::Parser;
use XML::SimpleObject;
use SVG;
use Data::Dumper;

################################################################
#
# Configuration parameters
#
$WGET   = "/usr/local/bin/wget -qO -";
$CONFIG = "/www/docs/weathermapsvg/weathermap.xml";
$OUTPUT = "/www/docs/weathermapsvg/weathermap.svg";
$DEBUG  = 0;
$WIDTH  = 850;
$HEIGHT = 600;
#
################################################################


%optctl=();
GetOptions(
	\%optctl,
	"config:s",
	"output:s",
	"checkconfig",
	"version",
	"help",
	"debug",
	""
) || exit(1);

if( $optctl{"config"} ) {
	$CONFIG = $optctl{"config"};
}

if( $optctl{"output"} ) {
	$OUTPUT = $optctl{"output"};
}

if( $optctl{"version"} ) {
	&version;
	exit;
}

if( $optctl{"checkconfig"} ) {
	&checkconfig;
	exit;
}

if( $optctl{"help"} ) {
	&usage;
	exit;
}

if( $optctl{"debug"} ) {
	$DEBUG=1;
}

&read_config( $CONFIG );

#CREATE SVG
my $svg= SVG->new(
	width => "100%",
	height => "100%",
	id => "weathermap_root",
	viewBox => "0 0 $WIDTH $HEIGHT",
	preserveAspectRatio => 'xMinYMin',
	onload => "init(evt)"
);
$svg->title( id=>'document-title' )->cdata( 'Weathermap-SVG' );

my $script = $svg->script(-type=>"text/ecmascript");
$script->CDATA(qq|function init(evt)
 {
  if ( window.svgDocument == null )
  {
   svgDocument = evt.target.ownerDocument;
  }
  tooltip = svgDocument.getElementById('tooltip');
  tooltip_bg = svgDocument.getElementById('tooltip_bg');
  tooltip_img = svgDocument.getElementById('tooltip_img');
  svg = document.querySelector('svg');
  pt = svg.createSVGPoint();
  scale = 1;
  textAddLength = 8;
  normalFontSize = 12;
  tooltipHeight = 17;
  tooltipWidth = 55;
 }

 function cursorPoint(evt){
  pt.x = evt.clientX; pt.y = evt.clientY;
  return pt.matrixTransform(svg.getScreenCTM().inverse());
 }

 function ShowTooltipWithImage(evt, mouseovertext, image_url, image_width, image_height ) {
  _ShowTooltip(evt,mouseovertext, image_url, image_width, image_height);
 }

 function ShowTooltip(evt, mouseovertext) {
  _ShowTooltip(evt,mouseovertext, null, 0, 0);
 }

 function _ShowTooltip(evt, mouseovertext, image_url, image_width, image_height ) {
  var loc = cursorPoint(evt);
  if ( scale ) {
   xratio = loc.x / evt.clientX;
   yratio = loc.y / evt.clientY;

   tooltip.style.fontSize = parseInt(normalFontSize * xratio)+"px";

   tooltip_bg.setAttributeNS(null,"width",parseInt(tooltipWidth * xratio));
   tooltip_bg.setAttributeNS(null,"height",parseInt(tooltipHeight * yratio));
   textAddLength = parseInt(textAddLength * xratio);
   scale = 0;
  }

  tooltip.setAttributeNS(null,"x",loc.x+11);
  tooltip.setAttributeNS(null,"y",loc.y+15+(normalFontSize * xratio));
  tooltip.firstChild.data = mouseovertext;

  length = tooltip.getComputedTextLength();
  tooltip_bg.setAttributeNS(null,"width",length+textAddLength);
  tooltip_bg.setAttributeNS(null,"x",loc.x+8);
  tooltip_bg.setAttributeNS(null,"y",loc.y+14);

  if ( image_height > 0 ) {
   tooltip_bg.setAttributeNS(null,"height",parseInt( ( tooltipHeight + image_height ) * yratio ) + 10 );
  }else{
   tooltip_bg.setAttributeNS(null,"height",parseInt( tooltipHeight * yratio ) );
  }
  if ( image_width > 0 ) {
   tooltip_bg.setAttributeNS(null,"width",parseInt( image_width * xratio ) + 20 );
  }
  if ( image_url != null ) {
   tooltip_img.setAttributeNS(null,"x",loc.x+18);
   tooltip_img.setAttributeNS(null,"y",loc.y+20+(normalFontSize * xratio));
   tooltip_img.setAttributeNS(null,"width",parseInt(image_width*xratio));
   tooltip_img.setAttributeNS(null,"height",parseInt(image_height*yratio));
   tooltip_img.setAttributeNS('http://www.w3.org/1999/xlink',"href",image_url);
   tooltip_img.setAttributeNS(null,"visibility","visibile");
  }else{
   tooltip_img.setAttributeNS(null,"visibility","hidden");
  }


  tooltip.setAttributeNS(null,"visibility","visible");
  tooltip_bg.setAttributeNS(null,"visibility","visibile");
 }

 function HideTooltip(evt)
 {
  tooltip.setAttributeNS(null,"visibility","hidden");
  tooltip_bg.setAttributeNS(null,"visibility","hidden");
  tooltip_img.setAttributeNS(null,"visibility","hidden");
 }|
);
$svg->style()->CDATA(qq|
 .tooltip{
  font-size: 12px;
  font-family: monospace;
  fill: black;
 }
 .tooltip_bg{
  fill: #eef;
  stroke: black;
  stroke-width: 1;
  opacity: 0.85;
 }
|);

&title;
&images;

sub getSpeedString ($) {
	my $value = int(shift);
	if ( $value >= ( 1000 * 1000 * 1000 ) ) {
		return int( ( $value * 100 ) / ( 1000 * 1000 * 1000 ) ) / 100 ."Gbps";
	}
	if ( $value >= ( 1000 * 1000 ) ) {
		return int( ( $value * 100 ) / ( 1000 * 1000 ) ) / 100 ."Mbps";
	}
	if ( $value >= 1000 ) {
		return int( ( $value * 100 ) / ( 1000 ) ) / 100 ."Kbps";
	}
	return int($value * 100) / 100 ."bps";
}

sub getMRTG($$) {
	my $rejex = shift;
	my $data = shift;
	if( ( $data =~ /^https?:\/\//i ) || ( $data =~ /^ftp:\/\//i ) ) {
		open( LOG, "$WGET $data |" ) or warn "$data: $!\n";
	}else{
		open( LOG, "$data" ) or warn "data file $data: $!\n";
	}
	while( <LOG> ){
		if( /<\!-- $rejex d (\d+) -->/ ){
			return $1;
		}
	}
	return 0;
}

sub getRRD($$) {
	use RRDs;
	my $field = shift;
	my $data = shift;
	if ( ! $DATE ) {
		$DATE = RRDs::last "$data";
		$DATE = $DATE-300;
	}
	my ( $start,$step,$names,$data ) = RRDs::fetch "$data","AVERAGE","--start","$DATE","--end","$DATE";
	my $ERR=RRDs::error;
	die "W4RRD ERROR while reading $target{$link}: $ERR\n" if $ERR;
	foreach my $line ( @$data ) {
		if( @$line[$field] != null ) {
			return @$line[$field];
		}
	}
	return 0;
}


print "Opening log files...\n\n" if($DEBUG);
foreach $link ( sort keys  %linkType ) {
	$type = $linkType{$link};
	if ( defined($target{$link} ) ) {
		$data = $target{$link};
		$coef = 1;
		if( defined( $target_coef{$link} ) ) {
			$coef=$target_coef{$link};
		}
		print "FILE($type): $data\n" if($DEBUG);
		if( $type eq "mrtg" ) {
			$input{$link} = int( getMRTG( 'cuin',$data ) * $coef );
			$output{$link} = int( getMRTG( 'cuout',$data ) * $coef );
			print "LINK: $link, Input: $input{$link}\n" if($DEBUG);
			print "LINK: $link, Output : $output{$link}\n" if($DEBUG);
		}
		if( $type eq "rrd" ) {
			$input{$link} = int( getRRD( 0,$data ) * $coef + 0.5 );
			$output{$link} = int( getRRD( 1,$data ) * $coef + 0.5);
			print "LINK: $link, Input: $input{$link}\n" if($DEBUG);
			print "LINK: $link, Output : $output{$link}\n" if($DEBUG);
		}
		if( $type eq "rrd-single" ) {
			$input{$link} = int( getRRD( 0,$data ) * $coef + 0.5);
			$output{$link} = int( getRRD( 0,$data ) * $coef + 0.5);
			print "LINK: $link, Input: $input{$link}\n" if($DEBUG);
			print "LINK: $link, Output : $output{$link}\n" if($DEBUG);
		}
	} else {
		if( defined( $targetin{$link} ) && defined( $targetout{$link} ) ) {
			$datain = $targetin{$link};
			$dataout = $targetout{$link};
			$coef_in = 1;
			if( defined( $targetin_coef{$link} ) ) {
				$coef_in = $targetin_coef{$link};
			}
			$coef_out = 1;
			if( defined( $targetout_coef{$link} ) ) {
				$coef_out=$targetout_coef{$link};
			}
			$input{$link} = int( getRRD( 0,$datain ) * $coef_in + 0.5 );
			$output{$link} = int( getRRD( 0,$dataout ) * $coef_out + 0.5 );
			print "FILE_in($type) : $datain\n" if($DEBUG);
			print "FILE_out($type) : $dataout\n" if($DEBUG);
			print "LINK: $link, Input: $input{$link}\n" if($DEBUG);
			print "LINK: $link, Output : $output{$link}\n" if($DEBUG);
		}
	}
}

print "\nCalculating rates...\n\n" if($DEBUG);

foreach $link ( sort keys %linkType ) {
	if ( !defined( $unknow{$link} ) ) {
		$outrate = int( ( $output{$link} / $maxbytes{$link} + 0.005 ) * 100 );
		$inrate = int( ( $input{$link} / $maxbytes{$link} + 0.005 ) * 100 );
	} else {
		$outrate = 0;
		$inrate = 0;
	}
	if( $output{$link} != 0 && $outrate == 0 ) {
		$outrate = 1;
	}
	if( $input{$link} != 0 && $inrate == 0 ) {
		$inrate = 1;
	}
	print "$target{$link}: outrate=$outrate%, inrate=$inrate%\n" if($DEBUG);
	$width = 7;

	if ($url{$link}) {
		$svg_element = $svg->anchor(
			-href => $url{$link},
			target => 'new_window'
		);
	}else{
		$svg_element = $svg;
	}
	$dashed = 0;
	if ( defined( $unknow{$link} ) ) {
		$dashed=1;
	}
	if ( $linkType{$link} eq "rrd-single" ) {
		my $arrow1 = &draw_arrow(
			$xpos{$nodea{$link}},
			$ypos{$nodea{$link}},
			$xpos{$nodeb{$link}},
			$ypos{$nodeb{$link}},
			$width, 1, &select_color($inrate), &select_color_rgb($inrate),
			$inrate,$svg_element,$dashed
		);
		&label(
			$svg_element,&middle($xpos{$nodeb{$link}},$xpos{$nodea{$link}}),
			&middle($ypos{$nodeb{$link}},$ypos{$nodea{$link}}),
			$inrate . "%", 0
		);
		if ( defined( $tooltip{$link} ) ) {
			my $tooltip_text_in = $tooltip{$link};
			my $speed = getSpeedString($maxbytes{$link}*8);
			$tooltip_text_in =~ s/%RATE%/$speed/g;
			$tooltip_text_in =~ s/%INUSE%/$inrate/g;
			if ( defined( $tooltip_img_url{$link} ) && defined ( $tooltip_img_width{$link} ) && defined ( $tooltip_img_height{$link} ) ) {
				$arrow1->attrib("onmousemove","ShowTooltipWithImage(evt, '$tooltip_text_out', '$tooltip_img_url{$link}', $tooltip_img_width{$link}, $tooltip_img_height{$link})");
			}else {
				$arrow1->attrib("onmousemove","ShowTooltip(evt, '$tooltip_text_out')");
			}
			$arrow1->attrib("onmouseout","HideTooltip(evt)");
		}
	}else{
		my $arrow1 = &draw_arrow(
			$xpos{$nodea{$link}},
			$ypos{$nodea{$link}},
			&middle($xpos{$nodea{$link}},$xpos{$nodeb{$link}}),
			&middle($ypos{$nodea{$link}},$ypos{$nodeb{$link}}),
			$width, 1, &select_color($outrate), &select_color_rgb($outrate),
			$outrate,$svg_element,$dashed
		);
		if ( !defined( $unknow{$link} ) ) {
			&label(
				$svg_element,&middle($xpos{$nodea{$link}},&middle($xpos{$nodea{$link}},$xpos{$nodeb{$link}})),
				&middle($ypos{$nodea{$link}},&middle($ypos{$nodea{$link}},$ypos{$nodeb{$link}})),
				$outrate . "%", 0
			);
		}
		my $arrow2 = &draw_arrow(
			$xpos{$nodeb{$link}},
			$ypos{$nodeb{$link}},
			&middle($xpos{$nodea{$link}},$xpos{$nodeb{$link}}),
			&middle($ypos{$nodea{$link}},$ypos{$nodeb{$link}}),
			$width, 1, &select_color($inrate), &select_color_rgb($inrate),
			$inrate,$svg_element,$dashed
		);
		if ( !defined( $unknow{$link} ) ) {
			&label(
				$svg_element,&middle($xpos{$nodeb{$link}},&middle($xpos{$nodea{$link}},$xpos{$nodeb{$link}})),
				&middle($ypos{$nodeb{$link}},&middle($ypos{$nodea{$link}},$ypos{$nodeb{$link}})),
				$inrate . "%", 0
			);
		}
		if ( defined( $tooltip{$link} ) ) {
			my $tooltip_text_in = $tooltip{$link};
			my $tooltip_text_out = $tooltip{$link};
			my $speed = getSpeedString($maxbytes{$link}*8);
			$tooltip_text_in =~ s/%RATE%/$speed/g;
			$tooltip_text_out =~ s/%RATE%/$speed/g;
			$tooltip_text_in =~ s/%INUSE%/$inrate/g;
			$tooltip_text_out =~ s/%INUSE%/$outrate/g;
			if ( defined( $tooltip_img_url{$link} ) && defined ( $tooltip_img_width{$link} ) && defined ( $tooltip_img_height{$link} ) ) {
				$arrow1->attrib("onmousemove","ShowTooltipWithImage(evt, '$tooltip_text_out', '$tooltip_img_url{$link}', $tooltip_img_width{$link}, $tooltip_img_height{$link})");
				$arrow2->attrib("onmousemove","ShowTooltipWithImage(evt, '$tooltip_text_in', '$tooltip_img_url{$link}', $tooltip_img_width{$link}, $tooltip_img_height{$link})");
			}else{
				$arrow1->attrib("onmousemove","ShowTooltip(evt, '$tooltip_text_out')");
				$arrow2->attrib("onmousemove","ShowTooltip(evt, '$tooltip_text_in')");
			}
			$arrow1->attrib("onmouseout","HideTooltip(evt)");
			$arrow2->attrib("onmouseout","HideTooltip(evt)");
		}
	}
}
print "\n" if($DEBUG);

foreach( keys %xpos ) {
	if ( $url{$_} ) {
		$svg_element = $svg->anchor(
			-href => $url{$_},
			target => 'new_window'
		);
	}else{
		$svg_element = $svg;
	}
	&label($svg_element,$xpos{$_},$ypos{$_},$label{$_}, 3);
}

&annotation;
&objects;
&bars;

# Tooltip stuf
$svg->rectangle(
	x => 0,
	y => 0,
	rx => 4,
	ry => 4,
	width => 55,
	height => 17,
	id=>'tooltip_bg',
	class=>'tooltip_bg',
	visibility=>'hidden'
);
$svg->text(
	id=>'tooltip',
	class=>'tooltip',
	visibility=>'hidden'
)->cdata( '' );
$svg->image(
	id      => 'tooltip_img',
	visibility=>'hidden',
	x       => 0,
	y       => 0,
	width   => 0,
	height  => 0,
	'-href' => ""
);

print "Generating image file $OUTPUT...\n\n" if($DEBUG);

my $out = $svg->xmlify;
open( OUT, ">$OUTPUT" );
print OUT $out;
close( OUT );
exit;


# print labels
sub label {
	$svg_element = shift;
	$xpos = shift;
	$ypos = shift;
	$label = shift;
	$pad = shift;

	my ( $strwidth ) = 8 * length( $label );
	my ( $strheight ) = 16;

	$svg_element->rectangle(
		x => $xpos - $strwidth / 2 - $pad - 2,
		y => $ypos - $strheight / 2 - $pad + 1,
		width => ( $xpos + $strwidth / 2 + $pad + 1 ) - ( $xpos - $strwidth / 2 - $pad - 2 ),
		height => ( $ypos + $strheight / 2 + $pad ) - ( $ypos - $strheight / 2 - $pad + 1 ),
		rx => 0,
		ry => 0,
		style => {
			'fill' => '#ffffff',
			'stroke' => '#000000'
		}
	);
	$svg_element->text(
		x => $xpos - $strwidth / 2,
		y => $ypos + 4,
		style=>( $label =~ /^#/ ) ? {
				'font-family' => 'monospace',
				'fill' => '#888888'
			}:{
				'font-family' => 'monospace',
				'fill' => '#000066'
			}
	)->cdata( $label );
}

sub bars {
	foreach $bar ( sort keys %bar_id ) {
		my $bar_size_x = $xbarsize{$bar};
		my $bar_size_y= $ybarsize{$bar};
		my $bar_pos_x = $xbarpos{$bar};
		my $bar_pos_y = $ybarpos{$bar};

		$data = $barTarget{$bar};
		my $bar_value = int( getRRD( 0,$data ) / $barMax{$bar} * 100 );
		print "BAR FILE: $data : $bar_value %\n" if($DEBUG);


		if ( $url{$bar} ) {
			$svg_element = $svg->anchor(
				-href => $url{$bar},
				target => 'new_window'
			);
		} else{
			$svg_element = $svg;
		}
		$svg_element->rectangle(
			x      => $bar_pos_x,
			y      => $bar_pos_y,
			width  => $bar_size_x,
			height => $bar_size_y,
			rx     => 0,
			ry     => 0,
			style  => {
				'fill' => '#ffffff',
				'stroke' => '#000000'
			}
		);
		$svg_element->rectangle(
			x      => $bar_pos_x + 1,
			y      => $bar_pos_y + ( $bar_size_y - ( $bar_size_y * $bar_value / 100 ) ),
			width  => $bar_size_x - 2,
			height => ( $bar_size_y * $bar_value / 100 ) - 1,
			rx     => 0,
			ry     => 0,
			style  => {
				'fill' => '#00FF00',
				'stroke' => '#00FF00'
			}
		);
		my $bar_label = "$bar_value %";
		$svg_element->text(
			x      => $bar_pos_x + ( $bar_size_x - 8 * length( $bar_label ) ) / 2,
			y      => $bar_pos_y + ( $bar_size_y / 2 ),
			style  => {
				'font-family' => 'monospace',
				'fill' => '#000000',
				'font-weight' => 'bold'
			}
		)->cdata( $bar_label );
	}
}

sub objects {
	foreach $object ( sort keys %object_id ) {
		my $object_label = $object_label{$object};
		my $object_color = $object_color{$object};
		my $object_size_x = $xobjectsize{$object};
		my $object_size_y= $yobjectsize{$object};
		my $object_pos_x = $xobjectpos{$object};
		my $object_pos_y = $yobjectpos{$object};
		if ( $url{$object} ) {
			$svg_element = $svg->anchor(
				-href => $url{$object},
				target => 'new_window'
			);
		}else{
			$svg_element = $svg;
		}
		$svg_element->rectangle(
			x     => $object_pos_x,
			y     => $object_pos_y,
			width => $object_size_x,
			height => $object_size_y,
			rx    => 0,
			ry     => 0,
			style=>{
				'fill' => $object_color,
				'stroke' => '#000000'
			}
		);
		$svg_element->text(
			x => $object_pos_x+($object_size_x - 8*length($object_label))/2,
			y => $object_pos_y+($object_size_y/2),
			style => {
				'font-family' => 'monospace',
				'fill' => '#660000',
				'font-weight' => 'bold'
			}
		)->cdata( $object_label );
	}
}

sub images {
	foreach $image ( keys %image_url ) {
		my $image_pos_x = $ximagepos{$image};
		my $image_pos_y = $yimagepos{$image};
		my $image_size_x = $ximagesize{$image};
		my $image_size_y = $yimagesize{$image};
		my $image_url = $image_url{$image};
		my $image_type = $image_type{$image};
		$svg->image(
			x       => $image_pos_x,
			y       => $image_pos_y,
			width   => $image_size_x,
			height  => $image_size_y,
			'-href' => "$image_url"
		);
	}
}

sub title {
	$t = localtime( time );
	$update_text = "Last update on $t";
	my $rect_size_x = 0;
	$title_text = "$title_text - WeatherMapSVG $VERSION";
	if ( length( $update_text ) > length( $title_text ) ) {
		$rect_size_x = 8 * length( $update_text ) + 130;
	}else{
		$rect_size_x = 8 * length( $title_text ) + 130;
	}
	$svg->rectangle(
		x     => $title_pos_x,
		y     => $title_pos_y,
		width => $rect_size_x,
		height =>16*3+10,
		rx    => 0,
		ry     => 0,
		style=>{
			'fill' => '#ffffff',
			'stroke' => '#000000'
		}
	);
	$svg->text(
		x => $title_pos_x + 124,
		y => $title_pos_y + 20,
		style=>{
			'font-family' => 'monospace',
			'fill' => '#660000',
			'font-weight' => 'bold'
		}
	)->cdata( $title_text );
	$svg->line(
		x1 => $title_pos_x + 120,
		y1 => $title_pos_y + 30,
		x2 => $title_pos_x + $rect_size_x,
		y2 => $title_pos_y + 30,
		style => {
			'fill' => '#ffffff',
			'stroke' => '#000000'
		}
	);
	$svg->line(
		x1 => $title_pos_x + 120,
		y1 => $title_pos_y,
		x2 => $title_pos_x + 120,
		y2 => $title_pos_y + 16 * 3 + 10,
		style => {
			'fill' => '#ffffff',
			'stroke' => '#000000'
		}
	);
	$svg->text(
		x => $title_pos_x + 124,
		y => $title_pos_y + 50,
		style=>{
			'font-family' => 'monospace',
			'fill' => '#000066',
			'font-weight' => 'bold'
		}
	)->cdata( $update_text );

	&drawLogo( $title_pos_x + 5, $title_pos_y + 5 );

}
# print annotation
sub annotation {
	my ( $title ) = "Traffic load";
	$strwidth = 8 * length( $label{$_} );
	$strheight = 16;
	foreach $comment ( keys %comment_text ) {
		$svg->text(
			x => $xcommentpos{$comment},
			y => $ycommentpos{$comment},
			style => {
				'font-family' => 'monospace',
				'fill' => '#000066'
			}
		)->cdata( $comment_text{$comment} );
	}

	$svg->rectangle(
		x     => $keyxpos,
		y     => $keyypos,
		width => 8 * length( $title ) + 10,
		height=> 16 * ( $scales + 1 ) + 10,
		rx    => 0,
		ry    => 0,
		style=>{
			'fill' => '#eeeeee',
			'stroke' => '#000000'
		}
	);
	$svg->text(
		x => $keyxpos + 4,
		y => $keyypos + 20,
		style => {
			'font-family' => 'monospace',
			'fill' => '#000000',
			'font-weight' => 'bold'
		}
	)->cdata( "Traffic load" );
	my ( $i ) = 1;
	foreach( sort { $scale_low{$a} <=> $scale_low{$b} } keys %scale_low ) {
		$red = $scale_red{$_};
		$green = $scale_green{$_};
		$blue = $scale_blue{$_};

		my $rec = $svg->rectangle(
			x     => $keyxpos + 6,
			y     => $keyypos + 16 * $i + 8,
			width => 16,
			height=> 16,
			rx    => 0,
			ry    => 0,
			style=>{
				'fill' => "rgb($red,$green,$blue)",
				'stroke' => '#000000'
			}
		);
		$svg->text(
			x => $keyxpos + 6 + 20,
			y => $keyypos + 16 * $i + 20,
			style => {
				'font-family' => 'monospace',
				'fill' => '#000000'
			}
		)->cdata( "$scale_low{$_}-$scale_high{$_}%" );
		$i++;
	}
}

sub select_color {
	my ( $rate ) = ( $_[0]>1000 ) ? 999:$_[0];
	if( $rate=="0" ) {
		return( $white );
	}
	foreach(sort { $scale_high{$a} <=> $scale_high{$b} } keys %scale_high ) {
		if( $scale_low{$_} <= $rate && $rate <= $scale_high{$_} ) {
			return( $color{$_} );
		}
	}
}

sub select_color_rgb {
	my ( $rate ) = ( $_[0]>1000 ) ? 999:$_[0];
	if( $rate=="0" ) {
		return( "rgb(255,255,255)" );
	}
	foreach( sort { $scale_high{$a}<=>$scale_high{$b} } keys %scale_high ) {
		if( $scale_low{$_} <= $rate && $rate <= $scale_high{$_} ) {
			return( "rgb(".$scale_red{$_}.",".$scale_green{$_}.",".$scale_blue{$_}.")" );
		}
	}
}

sub read_config {
	my ( $config ) = shift;
	my ( $node,$link );

	print "\nReading xml configuration file...\n\n" if($DEBUG);


	my $parser = XML::Parser->new( ErrorContext => 2, Style => "Tree" );
	my $xml = XML::SimpleObject->new( $parser->parsefile( $config ) );

	print "=================== SCALES =================\n" if($DEBUG);
	$scales = 0;
	foreach my $scale ( $xml->child( 'weathermap' )->child( 'scales' )->children( 'scale' ) ) {
		my $scale_low = $scale->child( 'low' )->value;
		my $scale_high = $scale->child( 'high' )->value;
		my $scale_color = $scale->child( 'color' );
		my $scale_red = $scale_color->attribute( 'red' );
		my $scale_green = $scale_color->attribute( 'green' );
		my $scale_blue = $scale_color->attribute( 'blue' );

		$scale_low{"$scale_low:$scale_high"} = $scale_low;
		$scale_high{"$scale_low:$scale_high"} = $scale_high;
		$scale_red{"$scale_low:$scale_high"} = $scale_red;
		$scale_green{"$scale_low:$scale_high"} = $scale_green;
		$scale_blue{"$scale_low:$scale_high"} = $scale_blue;
		$scales++;

		print "Low : $scale_low \tHigh: $scale_high \t($scale_red,$scale_green,$scale_blue)\n" if($DEBUG);
	}
	print "=================== GLOBAL =================\n" if($DEBUG);
	if($xml->child( 'weathermap' )->child( 'global' )->child( 'background' ) ) {
		my $background_node = $xml->child( 'weathermap' )->child( 'global' )->child( 'background' );
		my $background_type = $background_node->attribute( 'type' );
		my $background_url = $background_node->attribute( 'href' );
		$background = $background_url;
		$background_format = $background_type;
		print "Background[[1;32m$background_type[0m] = [1;31m$background_url[0m\n" if($DEBUG);
	}
	if( $xml->child( 'weathermap' )->child( 'global' )->child( 'scales_position' ) ) {
		my $scale_pos = $xml->child( 'weathermap' )->child( 'global' )->child( 'scales_position' );
		my $scale_pos_x = $scale_pos->attribute( 'x' );
		my $scale_pos_y = $scale_pos->attribute( 'y' );
		$keyxpos = $scale_pos_x;
		$keyypos = $scale_pos_y;
		print "Scales position = [1;31m{$scale_pos_x,$scale_pos_y}[0m\n" if($DEBUG);
	}
	if($xml->child( 'weathermap' )->child( 'global' )->child( 'size' ) ) {
		my $size_node = $xml->child( 'weathermap' )->child( 'global' )->child( 'size' );
		$WIDTH = $size_node->attribute( 'x' );
		$HEIGHT = $size_node->attribute( 'y' );
		print "Size {[1;32m$WIDTH,$HEIGHT[0m}\n" if($DEBUG);
	}
	if($xml->child( 'weathermap' )->child( 'global' )->child( 'title' ) ) {
		$title = $xml->child( 'weathermap' )->child( 'global' )->child( 'title' );
		$title_text = $title->value;
		$title_pos_x = $title->attribute( 'x' );
		$title_pos_y = $title->attribute( 'y' );
		print "Title {[1;32m$title_pos_x,$title_pos_y[0m} = [1;31m$title_text[0m\n" if($DEBUG);
	}


	print "==================== NODES =================\n" if($DEBUG);
	if ( $xml->child( 'weathermap' )->child( 'nodes' )->children( 'node' ) ) {
		foreach my $node ( $xml->child( 'weathermap' )->child( 'nodes' )->children( 'node' ) ) {
			my $node_name = $node->attribute( 'name' );
			my $node_label = $node->child( 'label' )->value;
			my $node_pos = $node->child( 'position' );
			my $node_pos_x = $node_pos->attribute( 'x' );
			my $node_pos_y = $node_pos->attribute( 'y' );

			if( $node->child( 'url' ) ) {
				$url{$node_name} = $node->child( 'url' )->value;
			}
			$node = $node_name;
			$xpos{$node} = $node_pos_x;
			$ypos{$node} = $node_pos_y;
			$label{$node} = $node_label;
			print "[[1;32m$node_name[0m] {$node_pos_x,$node_pos_y} Label : $node_label\n" if($DEBUG);
		}
	}

	print "==================== LINKS =================\n" if($DEBUG);
	if ( $xml->child( 'weathermap' )->child( 'links' )->children( 'link' ) ) {
		foreach my $link_node ( $xml->child( 'weathermap' )->child( 'links' )->children( 'link' ) ) {
			my $link_name = $link_node->attribute( 'name' );
			my $link_target_type = $link_node->attribute( 'type' );

			my $link_bandwidth = $link_node->child( 'bandwidth' )->value;
			my $link_mb_bandwidth = $link_bandwidth / 1000;
			my $link_members = "";

			$link = $link_name;
			$bandwidth{$link} = $link_bandwidth;
			if ( $link_target_type eq "rrd-single" ) {
				$maxbytes{$link} = $bandwidth{$link};
				$linkType{$link} = $link_target_type;
			} else{
				$maxbytes{$link} = $bandwidth{$link}*1000/8;
				$linkType{$link} = $link_target_type;
			}
			if( $link_node->child( 'url' ) ) {
				$url{$link} = $link_node->child( 'url' )->value;
			}
			if( $link_node->child( 'tooltip' ) ) {
				$tooltip{$link} = $link_node->child( 'tooltip' )->value;
			}elsif ( $xml->child( 'weathermap' )->child( 'links' )->child( 'default_tooltip' ) ) {
				$tooltip{$link} = $xml->child( 'weathermap' )->child( 'links' )->child( 'default_tooltip' )->value;
			}
			if( $link_node->child( 'tooltip_img' ) ) {
				$tooltip_img_url{$link} = $link_node->child( 'tooltip_img' )->value;
				$tooltip_img_width{$link} = $link_node->child( 'tooltip_img' )->attribute( 'width' );
				$tooltip_img_height{$link} = $link_node->child( 'tooltip_img' )->attribute( 'height' );
			}

			my $id_member=0;
			foreach my $member ( $link_node->child( 'members' )->children( 'member' ) ) {
				$link_members .= $member->value." ";
				$nodea{$link} = $member->value if( $id_member == 0 );
				$nodeb{$link} = $member->value if( $id_member == 1 );
				$id_member++;
			}
			print "[[1;32m$link_name[0m] ( [31m$link_mb_bandwidth Mbit/s[0m ) $link_members target[$link_target_type] = " if($DEBUG);

			if ( $link_node->child('target') ) {
				my $link_target = $link_node->child('target');
				my $link_target_url = $link_target->attribute('href');
				if( $link_target->attribute( 'coef' ) ) {
					my $link_target_coef = $link_target->attribute( 'coef' );
					$target_coef{$link} = $link_target_coef;
				}
				$target{$link} = $link_target_url;

				print "$link_target_url\n" if($DEBUG);
			} else{
				if ( $link_node->child( 'targetin' ) && $link_node->child( 'targetout' ) ) {
					my $link_targetin = $link_node->child('targetin');
					my $link_targetin_url = $link_targetin->attribute('href');
					if( $link_targetin->attribute( 'coef' ) ) {
						my $link_targetin_coef = $link_targetin->attribute( 'coef' );
						$targetin_coef{$link} = $link_targetin_coef;
					}
					my $link_targetout = $link_node->child( 'targetout' );
					my $link_targetout_url = $link_targetout->attribute( 'href' );
					if( $link_targetout->attribute( 'coef' ) ) {
						my $link_targetout_coef = $link_targetout->attribute( 'coef' );
						$targetout_coef{$link} = $link_targetout_coef;
					}
					$targetin{$link} = $link_targetin_url;
					$targetout{$link} = $link_targetout_url;
					print "$link_targetin_url && $link_targetout_url\n" if($DEBUG);
				}else{
					$unknow{$link} = 1;
				}
			}
		}
	}

	print "==================== Load Bars =================\n" if($DEBUG);
	if ( $xml->child( 'weathermap' )->child( 'loadbars' ) && $xml->child( 'weathermap' )->child( 'loadbars' )->children( 'bar' ) ) {
		my $bar_count = 0;
		foreach my $bar_node ( $xml->child( 'weathermap' )->child( 'loadbars' )->children( 'bar' ) ) {
			my $bar_name = $bar_node->attribute( 'name' );
			my $bar_max = $bar_node->child( 'max' )->value;

			my $bar_pos = $bar_node->child( 'position' );
			my $bar_pos_x = $bar_pos->attribute( 'x' );
			my $bar_pos_y = $bar_pos->attribute( 'y' );
			my $bar_size = $bar_node->child( 'size' );
			my $bar_size_x = $bar_size->attribute( 'x' );
			my $bar_size_y = $bar_size->attribute( 'y' );
			my $bar_target = $bar_node->child( 'target' );
			my $bar_target_url = $bar_target->attribute( 'href' );

			$bar = $bar_name;
			$xbarpos{$bar} = $bar_pos_x;
			$bar_id{$bar} = $bar_count;
			$ybarpos{$bar} = $bar_pos_y;
			$xbarsize{$bar} = $bar_size_x;
			$ybarsize{$bar} = $bar_size_y;

			$barMax{$bar} = $bar_max;
			$barTarget{$bar} = $bar_target_url;

			if( $bar_node->child( 'url' ) ) {
				$url{$bar} = $bar_node->child( 'url' )->value;
			}

			print "[[1;32mBAR $bar_name[0m] ( [31mMax : $bar_max[0m ) target = $bar_target_url\n" if($DEBUG);
			$bar_count++;
		}
	}

	print "=================== COMMENTS ===============\n" if($DEBUG);
	if ( $xml->child( 'weathermap' )->child( 'comments' )->children( 'comment' ) ) {
		foreach my $comment_node ( $xml->child( 'weathermap' )->child( 'comments' )->children( 'comment' ) ) {
			my $comment_text = $comment_node->child( 'text' )->value;
			my $comment_name = $comment_node->attribute( 'name' );
			my $comment_pos = $comment_node->child( 'position' );
			my $comment_pos_x = $comment_pos->attribute( 'x' );
			my $comment_pos_y = $comment_pos->attribute( 'y' );

			$comment = $comment_name;
			$comment_text{$comment} = $comment_text;
			$xcommentpos{$comment} = $comment_pos_x;
			$ycommentpos{$comment} = $comment_pos_y;

			print "Comment at {$comment_pos_x,$comment_pos_y} = $comment_text\n" if($DEBUG);
		}
	}

	print "=================== OBJECTS ===============\n" if($DEBUG);
	my $obj_count = 0;
	if ( $xml->child( 'weathermap' )->child( 'objects' )->children( 'object' ) ) {
		foreach my $object_node ($xml->child( 'weathermap' )->child( 'objects' )->children( 'object' ) ) {
			my $object_label = $object_node->child( 'label' )->value;
			my $object_name = $object_node->attribute( 'name' );
			my $object_pos = $object_node->child( 'position' );
			my $object_pos_x = $object_pos->attribute( 'x' );
			my $object_pos_y = $object_pos->attribute( 'y' );
			my $object_size = $object_node->child( 'size' );
			my $object_size_x = $object_size->attribute( 'x' );
			my $object_size_y = $object_size->attribute( 'y' );

			my $object_color = "#ffffff";
			if ( $object_node->attribute( 'color' ) ) {
				$object_color = $object_node->attribute( 'color' );
			}

			$object = $object_name;
			$object_id{$object} = $obj_count;
			$object_label{$object} = $object_label;
			$xobjectpos{$object} = $object_pos_x;
			$yobjectpos{$object} = $object_pos_y;
			$xobjectsize{$object} = $object_size_x;
			$yobjectsize{$object} = $object_size_y;
			$object_color{$object} = $object_color;

			if( $object_node->child( 'url' ) ) {
				$url{$object}=$object_node->child( 'url' )->value;
			}

			print "Object[$object_pos_z] at {$object_pos_x,$object_pos_y} {$object_size_x,$object_size_y}= $object_label\n" if($DEBUG);
			$obj_count++;
		}
	}

	print "=================== IMAGES ===============\n" if($DEBUG);
	if ( $xml->child( 'weathermap' )->child( 'images' ) && $xml->child( 'weathermap' )->child( 'images' )->children( 'image' ) ) {
		foreach my $image_node ( $xml->child( 'weathermap' )->child( 'images' )->children( 'image' ) ) {
			my $image_name = $image_node->attribute( 'name' );
			my $image_url = $image_node->attribute( 'href' );
			my $image_type = $image_node->attribute( 'type' );
			my $image_pos = $image_node->child( 'position' );
			my $image_size = $image_node->child( 'size' );
			my $image_pos_x = $image_pos->attribute( 'x' );
			my $image_pos_y = $image_pos->attribute( 'y' );
			my $image_size_x = $image_size->attribute( 'x' );
			my $image_size_y = $image_size->attribute( 'y' );

			$image = $image_name;
			$image_url{$image} = $image_url;
			$image_type{$image} = $image_type;
			$ximagepos{$image} = $image_pos_x;
			$yimagepos{$image} = $image_pos_y;
			$ximagesize{$image} = $image_size_x;
			$yimagesize{$image} = $image_size_y;

			print "Image at {$image_pos_x,$image_pos_y} = $image_url\n" if($DEBUG);
		}
	}
}


sub middle {
	return int( $_[0] + ($_[1]-$_[0])/2 );
}

sub dist {
	return int( sqrt( $_[0]*$_[0] + $_[1]*$_[1] ) );
}

sub newx {
	my ( $a,$b,$x,$y ) = @_;
	return int( cos( atan2($y,$x) + atan2($b,$a) ) * sqrt( $x*$x + $y*$y ) );
}

sub newy {
	my( $a,$b,$x,$y ) = @_;
	return int( sin( atan2($y,$x) + atan2($b,$a) ) * sqrt( $x*$x + $y*$y ) );
}



sub draw_arrow {
	$x1 = shift;
	$y1 = shift;
	$x2 = shift;
	$y2 = shift;
	$w = shift;
	$solid = shift;
	$color = shift;
	$rgb = shift;
	$overquota = shift;
	$svg_root = shift;
	$dashed = shift;

	$xv = [ $x1 + &newx( $x2-$x1, $y2-$y1, 0, $w ),
	$x2 + &newx( $x2-$x1, $y2-$y1, -4*$w, $w ),
	$x2 + &newx( $x2-$x1, $y2-$y1, -4*$w, 2*$w ),
	$x2,
	$x2 + &newx( $x2-$x1, $y2-$y1, -4*$w, -2*$w ),
	$x2 + &newx( $x2-$x1, $y2-$y1, -4*$w, -$w ),
	$x1 + &newx( $x2-$x1, $y2-$y1, 0, -$w )
	];
	$yv = [ $y1 + &newy( $x2-$x1, $y2-$y1, 0, $w ),
	$y2 + &newy( $x2-$x1, $y2-$y1, -4*$w, $w ),
	$y2 + &newy( $x2-$x1, $y2-$y1, -4*$w, 2*$w ),
	$y2,
	$y2 + &newy( $x2-$x1, $y2-$y1, -4*$w, -2*$w ),
	$y2 + &newy( $x2-$x1, $y2-$y1, -4*$w, -$w ),
	$y1 + &newy( $x2-$x1, $y2-$y1, 0, -$w )
	];

	my $points1 = $svg_root->get_path(
		x => $xv,
		y => $yv,
		-type => 'polygon'
	);
	if( $dashed eq 1 ) {
		my $polyg = $svg_root->polygon(
			%$points1,
			'fill' => "$rgb",
			'stroke' => ( $overquota > 100 ) ? '#FF0000' : '#000000',
			'stroke-width' => ( $overquota > 100 ) ? '3' : '1',
			'stroke-dasharray' => '9,5',
		);
		return $polyg;
	}else{
		my $polyg = $svg_root->polygon(
			%$points1,
			'fill' => "$rgb",
			'stroke' => ( $overquota > 100 ) ? '#FF0000' : '#000000',
			'stroke-width' => ( $overquota > 100 ) ? '3' : '1',
		);
		return $polyg;
	}
}

sub drawLogo() {
	my $x = shift;
	my $y = shift;

	my $link1=$svg->anchor(
		-href => 'https://sourceforge.net/projects/weathermap-svg/',
		target => 'new_window'
	);

	my $xv = [ 0+$x, 30+$x, 70+$x, 60+$x, 30+$x,  10+$x ];
	my $yv = [ 0+$y, 30+$y, 0+$y,  0+$y,  25+$y,  0+$y ];

	my $points2 = $svg->get_path(
		x => $xv,
		y => $yv,
		-type => 'polygon'
	);
	$link1->polygon(
		%$points2,
		style => {
			'fill' => '#ff0000',
			'stroke' => '#000000'
		}
	);

	$xv = [ 40+$x, 70+$x, 110+$x, 100+$x, 70+$x,  50+$x ];
	$yv = [ 0+$y, 30+$y, 0+$y,  0+$y,  25+$y,  0+$y ];

	my $points3 = $svg->get_path(
		x => $xv,
		y => $yv,
		-type => 'polygon'
	);
	$link1->polygon(
		%$points3,
		style => {
			'fill' => '#00ff00',
			'stroke' => '#000000'
		}
	);

	$link1->circle( cx=>35+$x, cy=>5+$y, r=>5 );
	$link1->circle( cx=>75+$x, cy=>5+$y, r=>5 );
	$xv = [ 40+$x, 55+$x, 55+$x, 73+$x,55+$x,  55+$x, 40+$x ];
	$yv = [ 8+$y,  8+$y,  10+$y, 5+$y, 0+$y,  2+$y,  2+$y ];

	my $points1 = $svg->get_path(
		x => $xv,
		y => $yv,
		-type => 'polygon'
	);
	$link1->polygon(
		%$points1,
		style => {
			'fill' => '#ff00ff',
			'stroke' => '#000000'
		}
	);
	$xv = [ 0+$x, 110+$x, 110+$x, 0+$x ];
	$yv = [ 35+$y,  35+$y,  38+$y, 38+$y ];

	my $points4 = $svg->get_path(
		x => $xv,
		y => $yv,
		-type => 'polygon'
	);
	$link1->polygon(
		%$points4,
		style => {
			'fill' => '#000000',
			'stroke' => '#000000'
		}
	);
	$link1->text(
		x => 2 + $x,
		y => 50 + $y,
		style => {
			'font-family' => 'monospace',
			'fill' => '#000000',
			'font-weight' => 'bold'
		}
	)->cdata( "WeathermapSVG" );
}
sub checkconfig {
	my $check = `xmllint --valid --noout $CONFIG 2>&1`;
	if ( $check eq "" ){
		print "OK\n";
	}else{
		print "ERROR: \n$check\n";
	}
}

sub version {
	print "Wearthermap-SVG v$VERSION - http://sourceforge.net/projects/weathermap-svg/\n";
}

sub usage {
	print <<EOM;
Wearthermap-SVG v$VERSION - http://sourceforge.net/projects/weathermap-svg/
Usage: $0 [OPTION]...

-c, --config=FILE  configuration file (default $CONFIG)
-o, --output=FILE  output image file default (default $OUTPUT)
-v, --version      print version
-h, --help         print this text
--checkconfig      check config file syntax
-d, --debug        enable debug output

EOM
}
